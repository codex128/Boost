
#import "Common/ShaderLib/GLSLCompat.glsllib"
#import "Common/ShaderLib/PBR.glsllib"
#import "Common/ShaderLib/Parallax.glsllib"
#import "Common/ShaderLib/Lighting.glsllib"
#import "ShaderBoost/glsl/utils.glsllib"

#if NB_PROBES >= 1
    uniform samplerCube g_PrefEnvMap;
    uniform vec3 g_ShCoeffs[9];
    uniform mat4 g_LightProbeData;
#endif
#if NB_PROBES >= 2
    uniform samplerCube g_PrefEnvMap2;
    uniform vec3 g_ShCoeffs2[9];
    uniform mat4 g_LightProbeData2;
#endif
#if NB_PROBES == 3
    uniform samplerCube g_PrefEnvMap3;
    uniform vec3 g_ShCoeffs3[9];
    uniform mat4 g_LightProbeData3;
#endif

uniform vec4 g_LightData[NB_LIGHTS];
uniform vec4 g_AmbientLightColor;
const float pi = 3.14159265359;

/**
 * Applies physically based rendering for shading.
 * @param position         = vertex position
 * @param diffuse          = diffuse color
 * @param metallic         = metallic value
 * @param specular         = specular color
 * @param roughness        = roughness value
 * @param normal           = altered normal to calculate shading
 * @param trueNormal       = normal from vertex shader (do not alter)
 * @param ambientOcclusion = color of ambient occlusion
 * @param useAmbientLight  = use ambient light when calculating light probes
 * @return PBR-shaded color
 */
vec4 physicallyBasedRender(vec3 position,
                           vec4 diffuse,
                           float metallic,
                           vec4 specular,
                           float roughness,
                           vec3 normal,
                           vec3 trueNormal,
                           vec3 ambientOcclusion,
                           bool useAmbientLight) {
    vec3 viewDir = getViewDirection(position);
    vec4 output = vec4(0.0);
    vec4 diffuseColor = diffuse;
    float alpha = diffuseColor.a;
    float Metallic = float(metallic);
    float Roughness = float(roughness);
    vec3 norm = normal;
    vec4 specularColor = specular;
    vec3 fZero = specularColor.xyz;
    float ndotv = max(dot(norm, viewDir), 0.0);
    for (int i = 0; i < NB_LIGHTS; i += 3) {
        vec4 lightColor = g_LightData[i];
        vec4 lightData1 = g_LightData[i+1];
        vec4 lightDir = vec4(0.0);
        vec3 lightVec = vec3(0.0);
        lightComputeDir(position, lightColor.w, lightData1, lightDir, lightVec);
        // addition by codex, skip this light if the true normal is facing away from the light
        float angle = acos(dot(trueNormal, lightDir.xyz));
        if (angle > pi * 0.5) {
            continue;
        }
        float fallOff = 1.0;
        #if __VERSION__ >= 110
            // allow use of control flow
            if(lightColor.w > 1.0){
        #endif
                fallOff =  computeSpotFalloff(g_LightData[i+2], lightVec);
        #if __VERSION__ >= 110
            }
        #endif
        //point light attenuation
        fallOff *= lightDir.w;
        lightDir.xyz = normalize(lightDir.xyz);
        vec3 directDiffuse = vec3(0.0);
        vec3 directSpecular = vec3(0.0);
        float hdotv = PBR_ComputeDirectLight(
                norm, lightDir.xyz, viewDir,
                lightColor.rgb, fZero, Roughness, ndotv,
                directDiffuse,  directSpecular);
        vec3 directLighting = diffuseColor.rgb * directDiffuse + directSpecular;
        output.rgb += directLighting * fallOff;
    }
    #if NB_PROBES >= 1
        vec3 color1 = vec3(0.0);
        vec3 color2 = vec3(0.0);
        vec3 color3 = vec3(0.0);
        float weight1 = 1.0;
        float weight2 = 0.0;
        float weight3 = 0.0;
        float ndf = renderProbe(viewDir, position, normal, trueNormal, Roughness, diffuseColor, specularColor, ndotv, ambientOcclusion, g_LightProbeData, g_ShCoeffs, g_PrefEnvMap, color1);
        #if NB_PROBES >= 2
            float ndf2 = renderProbe(viewDir, position, normal, trueNormal, Roughness, diffuseColor, specularColor, ndotv, ambientOcclusion, g_LightProbeData2, g_ShCoeffs2, g_PrefEnvMap2, color2);
        #endif
        #if NB_PROBES == 3
            float ndf3 = renderProbe(viewDir, position, normal, trueNormal, Roughness, diffuseColor, specularColor, ndotv, ambientOcclusion, g_LightProbeData3, g_ShCoeffs3, g_PrefEnvMap3, color3);
        #endif
        #if NB_PROBES >= 2
            float invNdf =  max(1.0 - ndf,0.0);
            float invNdf2 =  max(1.0 - ndf2,0.0);
            float sumNdf = ndf + ndf2;
            float sumInvNdf = invNdf + invNdf2;
            #if NB_PROBES == 3
                float invNdf3 = max(1.0 - ndf3,0.0);
                sumNdf += ndf3;
                sumInvNdf += invNdf3;
                weight3 =  ((1.0 - (ndf3 / sumNdf)) / (NB_PROBES - 1)) *  (invNdf3 / sumInvNdf);
            #endif
            weight1 = ((1.0 - (ndf / sumNdf)) / (NB_PROBES - 1)) *  (invNdf / sumInvNdf);
            weight2 = ((1.0 - (ndf2 / sumNdf)) / (NB_PROBES - 1)) *  (invNdf2 / sumInvNdf);
            float weightSum = weight1 + weight2 + weight3;
            weight1 /= weightSum;
            weight2 /= weightSum;
            weight3 /= weightSum;
        #endif
        if (useAmbientLight) {
            color1.rgb *= g_AmbientLightColor.rgb;
            color2.rgb *= g_AmbientLightColor.rgb;
            color3.rgb *= g_AmbientLightColor.rgb;
        }
        output.rgb += color1 * clamp(weight1,0.0,1.0) + color2 * clamp(weight2,0.0,1.0) + color3 * clamp(weight3,0.0,1.0);
    #endif
    output.a = alpha;
    return output;
}
vec4 physicallyBasedRender(vec3 position, vec4 diffuse, float metallic, vec4 specular, float roughness, vec3 trueNormal) {
    return physicallyBasedRender(position, diffuse, metallic, specular, roughness, trueNormal, trueNormal, vec3(1.0), true);
}
vec4 physicallyBasedRender(vec3 position, vec4 diffuse, float metallic, vec4 specular, float roughness, vec3 normal, vec3 trueNormal) {
    return physicallyBasedRender(position, diffuse, metallic, specular, roughness, normal, trueNormal, vec3(1.0), true);
}
vec4 physicallyBasedRender(vec3 position, vec4 diffuse, float metallic, vec4 specular, float roughness, vec3 trueNormal, vec3 ambientOcclusion, bool useAmbientLight) {
    return physicallyBasedRender(position, diffuse, metallic, specular, roughness, trueNormal, trueNormal, ambientOcclusion, useAmbientLight);
}
