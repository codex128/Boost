
// both steepParallaxOffset and classicParallaxOffset are from jme3 Common/ShaderLib/Parallax.glsllib
vec2 steepParallaxOffset(sampler2D parallaxMap, vec3 vViewDir, vec2 texCoord, float parallaxScale, bool embedded) {
    vec2 vParallaxDirection = normalize(  vViewDir.xy );
    float fLength         = length( vViewDir );
    float fParallaxLength = sqrt( fLength * fLength - vViewDir.z * vViewDir.z ) / vViewDir.z;
    vec2 vParallaxOffsetTS = vParallaxDirection * fParallaxLength;           
    parallaxScale *=0.3;
    vParallaxOffsetTS *= parallaxScale;
    vec3 eyeDir = normalize(vViewDir).xyz;
    float nMinSamples = 6.0;
    float nMaxSamples = 1000.0 * parallaxScale;   
    float nNumSamples = mix( nMinSamples, nMaxSamples, 1.0 - eyeDir.z );
    float fStepSize = 1.0 / nNumSamples;   
    float fCurrHeight = 0.0;
    float fPrevHeight = 1.0;
    float fNextHeight = 0.0;
    float nStepIndex = 0.0;
    vec2 vTexOffsetPerStep = fStepSize * vParallaxOffsetTS;
    vec2 vTexCurrentOffset = texCoord;
    float  fCurrentBound     = 1.0;
    float  fParallaxAmount   = 0.0;
    while ( nStepIndex < nNumSamples && fCurrHeight <= fCurrentBound ) {
        vTexCurrentOffset -= vTexOffsetPerStep;
        fPrevHeight = fCurrHeight;
        if (embedded) {
            // parallax map is embedded in the alpha channel        
            fCurrHeight = texture2D(parallaxMap, vTexCurrentOffset).a;
        }
        else {
            // parallax map is a texture
            fCurrHeight = texture2D(parallaxMap, vTexCurrentOffset).r;                
        }
        fCurrentBound -= fStepSize;
        nStepIndex+=1.0;
    } 
    vec2 pt1 = vec2( fCurrentBound, fCurrHeight );
    vec2 pt2 = vec2( fCurrentBound + fStepSize, fPrevHeight);
    float fDelta2 = pt2.x - pt2.y;
    float fDelta1 = pt1.x - pt1.y;
    float fDenominator = fDelta2 - fDelta1;
    fParallaxAmount = (pt1.x * fDelta2 - pt2.x * fDelta1 ) / fDenominator;
    vec2 vParallaxOffset = vParallaxOffsetTS * (1.0 - fParallaxAmount );
    return texCoord - vParallaxOffset;
}
vec2 classicParallaxOffset(float value, vec3 vViewDir, vec2 texCoord, float parallaxScale){ 
    float h = value;
    float heightScale = parallaxScale;
    float heightBias = heightScale * -0.6;
    vec3 normView = normalize(vViewDir);
    h = (h * heightScale + heightBias) * normView.z;
    return texCoord + (h * normView.xy);
}
